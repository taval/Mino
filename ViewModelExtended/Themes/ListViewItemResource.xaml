<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{ DynamicResource { x:Static SystemColors.ControlTextBrushKey } }" SnapsToDevicePixels="true" StrokeThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- color brush resources -->
	
	<SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1FA6F0FA" />
	<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a886C0Fa" />
	<SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D86E0FA" />
	<SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF86C0FA" />
	<SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3D8ACAFA" />
	<SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA" />

	<SolidColorBrush x:Key="Item.Background.NoTitle" Color="#1FFAF0A6" />
	<SolidColorBrush x:Key="Item.Border.NoTitle" Color="#a8FaC086" />
	<SolidColorBrush x:Key="Item.Selected.Background.NoTitle" Color="#1FFFF5CA" />
	<SolidColorBrush x:Key="Item.Selected.Border.NoTitle" Color="#a8FfE5AA" />
	<SolidColorBrush x:Key="Item.SelectedActive.Background.NoTitle" Color="#3FFFA5AA" />
	<SolidColorBrush x:Key="Item.SelectedActive.Border.NoTitle" Color="#c8Ff957A" />
	<SolidColorBrush x:Key="Item.Foreground.NoTitle" Color="#800" />

	<!-- ListViewItem style with error display -->

	<Style x:Key="listViewItemStyle" TargetType="{ x:Type ListViewItem }">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="4,1" />
		<Setter Property="HorizontalContentAlignment" Value="{ Binding HorizontalContentAlignment, RelativeSource={ RelativeSource AncestorType={ x:Type ItemsControl } } }" />
		<Setter Property="VerticalContentAlignment" Value="{ Binding VerticalContentAlignment, RelativeSource={ RelativeSource AncestorType={ x:Type ItemsControl } } }" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{ StaticResource FocusVisual }" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{ x:Type ListViewItem }">
					<Border x:Name="Bd" Background="{ TemplateBinding Background }" BorderBrush="{ TemplateBinding BorderBrush }" BorderThickness="{ TemplateBinding BorderThickness }" Padding="{ TemplateBinding Padding }" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{ TemplateBinding HorizontalContentAlignment }" SnapsToDevicePixels="{ TemplateBinding SnapsToDevicePixels }" VerticalAlignment="{ TemplateBinding VerticalContentAlignment }" />
					</Border>
					<ControlTemplate.Triggers>

						<!-- custom normal brushes -->

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{ StaticResource Item.MouseOver.Background }" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{ StaticResource Item.MouseOver.Border }" />
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="False" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{ StaticResource Item.SelectedInactive.Background }" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{ StaticResource Item.SelectedInactive.Border }" />
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="True" />
								<Condition Property="IsSelected" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{ StaticResource Item.SelectedActive.Background }" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{ StaticResource Item.SelectedActive.Border }" />
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{ DynamicResource { x:Static SystemColors.GrayTextBrushKey } }" />
						</Trigger>

						<!-- custom error brushes -->

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{ Binding Title, TargetNullValue='' }" Value="" />
								<Condition Binding="{ Binding Path=(Selector.IsSelected), RelativeSource={ RelativeSource Self } }" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{ StaticResource Item.Background.NoTitle }" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{ StaticResource Item.Border.NoTitle }" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{ Binding Title, TargetNullValue='' }" Value="" />
								<Condition Binding="{ Binding Path=(Selector.IsSelected), RelativeSource={RelativeSource Self} }" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{ StaticResource Item.SelectedActive.Background.NoTitle }" />
							<Setter Property="BorderBrush" TargetName="Bd" Value="{ StaticResource Item.SelectedActive.Border.NoTitle }" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{ Binding Title, TargetNullValue='' }" Value="" />
								<Condition Binding="{ Binding Path=(Selector.IsEnabled), RelativeSource={ RelativeSource Self } }" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{ StaticResource Item.Foreground.NoTitle }" />
						</MultiDataTrigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
	
	