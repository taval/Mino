<!--<local:ListViewBase-->
<UserControl
	x:Class="Mino.GroupListView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:local="clr-namespace:Mino"
	mc:Ignorable="d"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	d:DesignHeight="450"
	d:DesignWidth="800">

	<Grid>

		<ListView
			FontSize="9"
			x:Name="ListView_GroupListView"
			AllowDrop="True"
			SelectedItem="{ Binding Highlighted }"
			ItemsSource="{ Binding Items, UpdateSourceTrigger=PropertyChanged }">

			<ListView.Resources>
				<Style TargetType="{ x:Type GridViewColumnHeader }">
					<Setter Property="HorizontalContentAlignment" Value="Left" />
				</Style>
			</ListView.Resources>

			<ListView.ItemContainerStyle>
				<Style TargetType="{ x:Type ListViewItem }" BasedOn="{ StaticResource listViewItemStyle }">
					<Setter Property="IsSelected" Value="{ Binding IsSelected }" />
				</Style>
			</ListView.ItemContainerStyle>

			<ListView.ItemTemplate>
				<DataTemplate>
					<Grid>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="*" />
							<!--<ColumnDefinition Width="*" />-->
						</Grid.ColumnDefinitions>

						<!-- ListViewItem: Close button -->
						<Button
							Template="{ StaticResource closeButtonTemplate }"
							Style="{ StaticResource closeButtonStyle }"
							Margin="0 0 6 0"
							Padding="8 0 8 3"
							Name="RemoveItemButton"
							Content="x"
							CommandParameter="{ Binding }"
							Command="{ Binding
								(local:ListAction.RemoveCommand),
								RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />

						<!-- ListViewItem: Group Title -->
						<TextBox
							Grid.Column="1"
                            MinWidth="32pt"
							Background="Transparent"
							BorderBrush="Transparent"
							FontWeight="Bold">

							<Binding Path="Title" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="True">
								<Binding.ValidationRules>
									<local:GroupTitleRule />
								</Binding.ValidationRules>
							</Binding>

							<i:Interaction.Triggers>
								<!-- NOTE: in addition to the ListViewItem, the TextBox must *also* trigger highlighting
									 which requires its own separate handling on top of the default SelectedItem behavior -->
								<i:EventTrigger
									EventName="PreviewMouseLeftButtonDown"
									SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type TextBox } } }">
									<i:InvokeCommandAction
										PassEventArgsToCommand="True"
										Command="{ Binding
											Path=DataContext.HighlightCommand,
											RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
								</i:EventTrigger>

								<i:EventTrigger
									EventName="KeyDown"
									SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type TextBox } } }">
									<i:InvokeCommandAction
										PassEventArgsToCommand="True"
										Command="{ Binding
											Path=(local:GroupAction.ChangeTitleCommand),
											RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
								</i:EventTrigger>

								<i:EventTrigger
									EventName="LostFocus"
									SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type TextBox } } }">
									<i:InvokeCommandAction
										CommandParameter="{ Binding
											Path=DataContext.Highlighted,
											RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }"
										Command="{ Binding
											Path=(local:GroupAction.UpdateTitleCommand),
											RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
								</i:EventTrigger>

							</i:Interaction.Triggers>

						</TextBox>

						<!--<Ellipse
							Grid.Column="2"
							Width="18"
							Height="18"
							Stroke="#999"
							StrokeThickness="0.5"
							Fill="{ Binding Color }" />-->

						<i:Interaction.Triggers>

							<i:EventTrigger
								EventName="MouseMove"
								SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type ListViewItem } } }">
								<i:InvokeCommandAction
									PassEventArgsToCommand="True"
									Command="{ Binding
										Path=DataContext.PickupCommand,
										RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
							</i:EventTrigger>

							<i:EventTrigger
								EventName="DragOver"
								SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type ListViewItem } } }">
								<i:InvokeCommandAction
									PassEventArgsToCommand="True"
									Command="{ Binding
										Path=DataContext.ReorderCommand,
										RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
							</i:EventTrigger>

							<i:EventTrigger
								EventName="MouseDoubleClick"
								SourceObject="{ Binding RelativeSource={ RelativeSource AncestorType={ x:Type ListViewItem } } }">
								<i:InvokeCommandAction
									PassEventArgsToCommand="True"
									Command="{ Binding
										Path=(local:SelectProperty.SelectCommand),
										RelativeSource={ RelativeSource AncestorType={ x:Type local:GroupListView } } }" />
							</i:EventTrigger>

						</i:Interaction.Triggers>

					</Grid>
				</DataTemplate>
			</ListView.ItemTemplate>

		</ListView>

	</Grid>

</UserControl>
<!--</local:ListViewBase-->
